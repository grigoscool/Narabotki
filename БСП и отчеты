 
 
В пользовательском понимании "Вариант отчета = Отчет"


 Методика подключения нового отчета к подсистеме «ВариантыОтчетов»

1) При создании отчета не забыть указать его принадлежность к нужной подсистеме.
2) При создании отчета, на закладке "Прочее" назначить использование хранилища вариантов отчетов данной конфигурации. 
3) Запустить обновление подсистемы «Варианты отчетов» в интерфейсе внешней обработки «ИнструментыРазработчикаОбновлениеВспомогательныхДанных.epf» 


Методика подключения панели отчетов к подсистеме
 
1) Клонировать любую аналогичную общую команду (например, «ПанельОтчетовАдминистрирование»). 
2) В клоне команды изменить название подсистемы на нужное в:
•	Имени команды;
•	Синониме команды;
•	Теле обработчика команды
 
3) Указать принадлежность самой команды к нужной подсистеме (контекстное меню, пункт «Дополнительно»).
 
4) Общий модуль «ВариантыОтчетовПереопределяемый», процедура «ОпределитьРазделыСВариантамиОтчетов». Надо добавить строку по образцу:
 
Разделы.Добавить(Метаданные.Подсистемы.<ИмяНужнойПодсистемы>);

Изменение настройки вариантов отчетов 

Настройки вариантов отчетов задаются в процедуре НастроитьВариантыОтчетов общего модуля ВариантыОтчетовПереопределяемый. 
Там следует разместить вызов модуля менеджера отчета по шаблону:

    ВариантыОтчетов.НастроитьОтчетВМодулеМенеджера(Настройки, Метаданные.Отчеты.ИмяОтчета);

А в модуле менеджера отчета вставить процедуру по шаблону:

Процедура НастроитьВариантыОтчета(Настройки, НастройкиОтчета) Экспорт
…
КонецПроцедуры

При этом параметр Настройки – это коллекция, которая может использоваться для получения настроек варианта этого отчета при помощи функции ВариантыОтчетов.ОписаниеВарианта(); а параметр НастройкиОтчета – это СтрокаДереваЗначений, содержащая настройки этого отчета, уже сформированные при помощи функции ВариантыОтчетов.ОписаниеОтчета() и готовые к изменению. (См.  «Свойства для изменения» процедуры ВариантыОтчетовПереопределяемый.НастроитьВариантыОтчетов()).

Итак, объекты НастройкиОтчета и НастройкиВарианта содержат следующие свойства, которые можно менять: 
● Включен – если установить в Ложь, то вариант отчета не регистрируется в справочнике и как следствие не выводится в панелях отчетов и других формах подсистемы (всегда скрыт от пользователей). При этом вариант отчета остается в конфигурации, и его по-прежнему можно открывать при программном открытии формы отчета. Например, может потребоваться отключение контекстных вариантов отчетов. 
● Описание – служит подсказкой на панели отчетов и содержит более подробное описание варианта отчета. Описание можно не заполнять для контекстных вариантов отчетов (которые не выводятся в панелях и списках отчетов). В противном случае Описание обязательно для заполнения. 
● ВидимостьПоУмолчанию – если установить в Ложь, то вариант отчета по умолчанию будет скрыт на панелях отчетов. Скрытый вариант отчета можно вывести на панель отчетов администратору – сразу для всех пользователей (через форму элемента), пользователю – на свою панель отчетов (через режим настройки). Например, может потребоваться скрывать менее частотные варианты отчетов.
● Размещение – служит для привязки вариантов отчетов к подсистемам конфигурации. Подсистемы первого уровня считаются разделами, второго и выше – группами. Если вариант включен в раздел, то на панели отчетов он будет выведен без группы. При необходимости для каждой подсистемы можно указать Важность:
● Важный – вариант отчета будет выделен жирным шрифтом и размещен в начале группы.
● СмТакже – вариант отчета будет выведен внизу панели отчетов, в группе См. также.
● ФункциональныеОпции – служит для скрытия вариантов отчетов по функциональным опциям. Содержит массив строк из имен функциональных опций конфигурации. Вариант отчета считается включенным в том случае, если включена одна из функциональных опций отчета (если они указаны) и одна из функциональных опций варианта отчета (если они указаны). 
● НастройкиДляПоиска – дополнительные сведения для поиска этого варианта отчета. Является структурой со следующими свойствами: 
● НаименованияПолей – представления полей варианта отчета; 
● НаименованияПараметровИОтборов – представления настроек варианта отчета; 
● КлючевыеСлова – дополнительная терминология (в т.ч. специализированная или устаревшая). Разделитель терминов: Символы.ПС.
● ОпределитьНастройкиФормы – включает переопределение настроек формы отчета. Внимание: свойство доступно только для объекта НастройкиОтчета. Если установить в значение Истина, то в модуле объекта отчета следует определить процедуру ОпределитьНастройкиФормы по шаблону:


#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
#Область ПрограммныйИнтерфейс
// Настройки общей формы отчета подсистемы "Варианты отчетов".
//
// Параметры:
//   Форма - УправляемаяФорма, Неопределено - Форма отчета или форма настроек отчета.
//       Неопределено когда вызов без контекста.
//   КлючВарианта - Строка, Неопределено - Имя предопределенного
//       или уникальный идентификатор пользовательского варианта отчета.
//       Неопределено когда вызов без контекста.
//   Настройки - Структура - Настройки общей формы отчета (для изменения).
//       См. возвращаемое значение ОтчетыКлиентСервер.ПолучитьНастройкиОтчетаПоУмолчанию().
//
Процедура ОпределитьНастройкиФормы(Форма, КлючВарианта, Настройки) Экспорт
КонецПроцедуры
#КонецОбласти
#КонецЕсли

Подробнее про изменение настроек формы отчета см. раздел ниже.

Изменение настройки формы отчета

 Настройки формы отчета задаются в процедуре ОпределитьНастройкиФормы модуля объекта отчета. Как определить эту процедуру, уже описано выше. Настройки для изменения передаются трем параметрам этой процедуры (Форма, КлючВарианта, Настройки) и последний содержит следующие свойства: 
● ФормироватьСразу – если установить в значение Истина, то отчет будет формироваться после открытия, после выбора пользовательских настроек и после выбора другого варианта отчета. По умолчанию – Ложь.
● ВыводитьСуммуВыделенныхЯчеек – если установить в значение Ложь, то в отчете не будет выводиться поле с автоматически рассчитываемой суммой выделенных ячеек. По умолчанию – Истина. 
● РазрешеноИзменятьСтруктуру – если установить в значение Ложь, то в настройках отчета будет скрыта вкладка "Структура". По умолчанию – Истина. По умолчанию вкладка "Структура" показыватеся для отчетов на СКД: в расширенном режиме, а также в простом режиме, если в пользовательские настройки выведены флажки использования группировок. 
● РазрешеноИзменятьВарианты – если установить в значение Ложь, то в форме отчета и настроек скрываются кнопки изменения вариантов этого отчета. Если у текущего пользователя нет прав СохранениеДанныхПользователя и Добавление справочника ВариантыОтчетов, то принудительно устанавливается в Ложь. По умолчанию – Истина.
● Печать – Структура – параметры печати табличного документа (могут переопределяться пользователем): 
● ПолеСверху – Число – отступ сверху при печати (в миллиметрах); 
● ПолеСлева – Число – отступ слева при печати (в миллиметрах); 
● ПолеСнизу – Число – отступ снизу при печати (в миллиметрах); 
● ПолеСправа – Число – отступ справа при печати (в миллиметрах); 
● ОриентацияСтраницы – ОриентацияСтраницы – «Портрет» или «Ландшафт»; 
● АвтоМасштаб – Булево – автоматически подгонять масштаб под размер страницы; 
● МасштабПечати – Число – масштаб изображения (в процентах). 
● События – Структура – события, для которых определены одноименные обработчики в модуле объекта отчета (обработчики событий рекомендуется определять в модуле объекта отчета,  в области ПрограммныйИнтерфейс, после процедуры ОпределитьНастройкиФормы):

● ПриСозданииНаСервере – если установить в значение Истина - определяет вызов процедуры:
// Вызывается в обработчике одноименного события формы отчета после выполнения кода формы.
Процедура ПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка) Экспорт
    // Обработка события.
КонецПроцедуры

● ПередЗагрузкойНастроекВКомпоновщик – если установить в значение Истина - определяет вызов процедуры:
// Вызывается перед загрузкой новых настроек. Используется для изменения схемы компоновки.
//   Например, если схема отчета зависит от ключа варианта или параметров отчета.
//   Чтобы изменения схемы вступили в силу следует вызывать метод ОтчетыСервер.ПодключитьСхему().
Процедура ПередЗагрузкойНастроекВКомпоновщик(Контекст, КлючСхемы, КлючВарианта, НовыеНастройкиКД, НовыеПользовательскиеНастройкиКД) Экспорт
    // Обработка события.
КонецПроцедуры

● ПередЗагрузкойВариантаНаСервере – если установить в значение Истина - определяет вызов процедуры:
// Вызывается в обработчике одноименного события формы отчета после выполнения кода формы.
//
// Параметры:
//   Форма - УправляемаяФорма - Форма отчета.
//   НовыеНастройкиКД - НастройкиКомпоновкиДанных - Настройки для загрузки в компоновщик 
Процедура ПередЗагрузкойВариантаНаСервере(Форма, НовыеНастройкиКД) Экспорт
    // Обработка события.
КонецПроцедуры

● ПриЗагрузкеВариантаНаСервере – если установить в значение Истина - определяет вызов процедуры:
Процедура ПриЗагрузкеВариантаНаСервере(Форма, НовыеНастройкиКД) Экспорт
    // Обработка события.
КонецПроцедуры

● ПриЗагрузкеПользовательскихНастроекНаСервере – если установить в значение Истина - определяет вызов процедуры:
Процедура ПриЗагрузкеПользовательскихНастроекНаСервере(Форма, НовыеПользовательскиеНастройкиКД) Экспорт
    // Обработка события.
КонецПроцедуры

● ПередЗаполнениемПанелиБыстрыхНастроек – если установить в значение Истина - определяет вызов процедуры:
// Вызывается до перезаполнения панели настроек формы отчета.
Процедура ПередЗаполнениемПанелиБыстрыхНастроек(Форма, ПараметрыЗаполнения) Экспорт
    // Обработка события.
КонецПроцедуры

● ПослеЗаполненияПанелиБыстрыхНастроек – если установить в значение Истина - определяет вызов процедуры:
// Вызывается после перезаполнения панели настроек формы отчета.
Процедура ПослеЗаполненияПанелиБыстрыхНастроек(Форма, ПараметрыЗаполнения) Экспорт
    // Обработка события.
КонецПроцедуры

● КонтекстныйВызовСервера – если установить в значение Истина - определяет вызов процедуры:
// Обработчик контекстного вызова сервера.
//   Позволяет выполнить контекстный вызов сервера, когда это требуется из клиентского общего модуля.
//   Например, из ОтчетыКлиентПереопределяемый.ОбработчикКоманды().
//
// Параметры:
//   Форма  - УправляемаяФорма
//   Ключ      - Строка    - Ключ операции, которую необходимо выполнить в контекстном вызове.
//   Параметры - Структура - Параметры вызова сервера.
//   Результат - Структура - Результат работы сервера, возвращается на клиент.
//
// См. также:
//   ОбщаяФорма.ФормаОтчета.ВыполнитьКонтекстныйВызовСервера().
//
Процедура КонтекстныйВызовСервера(Форма, Ключ, Параметры, Результат) Экспорт
    // Обработка события.
КонецПроцедуры

● ПриОпределенииПараметровВыбора – если установить в значение Истина - определяет вызов процедуры:
// Вызывается в форме отчета перед выводом настройки.
//   Подробнее - см. ОтчетыПереопределяемый.ПриОпределенииПараметровВыбора().
//
Процедура ПриОпределенииПараметровВыбора(Форма, СвойстваНастройки) Экспорт
    // Обработка события.
КонецПроцедуры

● ДополнитьСвязиОбъектовМетаданных – если установить в значение Истина - определяет вызов процедуры:
// Дополнительные связи настроек этого отчета.
// Параметры:
//   СвязиОбъектовМетаданных - ТаблицаЗначений - Таблица связей.
//       * ПодчиненныйРеквизит - Строка - Имя реквизита подчиненного объекта метаданных.
//       * ПодчиненныйТип      - Тип    - Тип подчиненного объекта метаданных.
//       * ВедущийТип          - Тип    - Тип ведущего объекта метаданных.
//
Процедура ДополнитьСвязиОбъектовМетаданных(СвязиОбъектовМетаданных) Экспорт
    // Обработка события.
КонецПроцедуры


Методика разработки функционала команды назначаемого отчета


1) Если отчета ранее вообще не было - добавьте его согласно методики "Подключения нового отчета конфигурации к подсистеме "Варианты отчетов";
2) Создайте новую команду отчета
● тип параметра команды – включить ссылки на нужные объекты вызова (для кого - отчет);
● режим использования параметра и группа - по желанию (чаще всего относят к группе команд "См. также")

3) В модуле команд снимите комментарий с предложенного конструктором кода, в структуре "ПараметрыФормы"  предустановите значения для параметров "СформироватьПриОткрытии" и "КлючВарианта" (последний должен получить имя желаемого варианта отчета);
4) Для ситуации простого отбора - задействуйте элемент параметров формы  "Отбор". Его надо заполнять структурой отбора;
5) Для ситуации сложного отбора или настройки - задействуйте элемент параметров формы "ФиксированныеНастройки".

	ФиксированныеНастройки = Новый НастройкиКомпоновкиДанных();

	ЭлементОтбораДанных = ФиксированныеНастройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Регистратор");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	ЭлементОтбораДанных.ПравоеЗначение = ПолучитьСписокРегистраторов(ПараметрКоманды);
	
	ЭлементОтбораДанных = ФиксированныеНастройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Номенклатура.Эксклюзивный товар (Общие)");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбораДанных.ПравоеЗначение = Истина;

	
	ПараметрыФормы = Новый Структура("СформироватьПриОткрытии,КлючВарианта,ФиксированныеНастройки", 
		Истина,
		"Основной",
		ФиксированныеНастройки);
	ОткрытьФорму("Отчет.ОтчетПоСчетамКонтрагентов.Форма", ПараметрыФормы, ПараметрыВыполненияКоманды.Источник, ПараметрыВыполненияКоманды.Уникальность, ПараметрыВыполненияКоманды.Окно, ПараметрыВыполненияКоманды.НавигационнаяСсылка);


Методика подготовки форм объекта для работы с назначаемыми (контекстными) отчетами


 Итак, резюмируем результат анализа алгоритма.
Что бы документ или справочник мог работать с отчетными формами – его формы нуждаются в определенного рода доработках.
Поскольку в современных редакциях стандартной подсистемы печати используется программная сборка подменю отчетов, то важно что бы 
1.      Была подготовлена форма объекта:
 
1.1   В обработчике «ПриСозданииНаСервере» должен вызывался стандартный алгоритм формирования подменю формы
 
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка) 
…
	// СтандартныеПодсистемы.ПодключаемыеКоманды
		ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
…
КонецПроцедуры

 
1.2   Должен присутствовать блок процедур, обслуживающих  создаваемые команды (именно с таким текстом):
 // СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

1.3   В обработчике «ПриЧтенииНаСервере» должен вызывался стандартный алгоритм обновления подменю формы

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	…
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	…
	
КонецПроцедуры
1.4   В обработчике «ПриОткрытии» должен вызывался стандартный алгоритм обновления подменю формы
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	…
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	…
КонецПроцедуры

(Как Вы верно уже догадались, программный код большинства вышеперечисленных пунктов «дешевле» скопировать у какой-нибудь уже подготовленной в типовой конфигурации формы объекта. Ибо – все стандартно.)

1.5   Желательно создать реквизит формы «ПараметрыПодключаемыхКоманд» с типом – «Произвольный» (наличие такого готового реквизита несколько ускоряет открытие формы).

1.6   Желательно добавить в командную панель подменю «ПодменюОтчеты» с установленными свойствами, как на картинке ниже:


2.      Была подготовлена форма списка:
 
2.1   В обработчике «ПриСозданииНаСервере» должен вызывался стандартный алгоритм формирования подменю формы
 
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка) 
…
	// СтандартныеПодсистемы.ПодключаемыеКоманды
		ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
…
КонецПроцедуры

 
2.2   Должен присутствовать блок процедур, обслуживающих  создаваемые команды (именно с таким текстом):
// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Элементы.Список);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Элементы.Список, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Элементы.Список);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

2.3   В обработчике «СписокПриАктивизацииСтроки» должен вызывался стандартный алгоритм обновления подменю формы

&НаКлиенте
Процедура СписокПриАктивизацииСтроки(Элемент)
	…
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	…
КонецПроцедуры

(Как Вы верно уже догадались, программный код большинства вышеперечисленных пунктов «дешевле» скопировать у какой-нибудь уже подготовленной в типовой конфигурации формы списка. Ибо – все стандартно.)

2.4 В форме списка обязательно  проверить наличие флажка "Использовать всегда" у поля "Ссылка" динамического списка:

2.5   Желательно создать реквизит формы «ПараметрыПодключаемыхКоманд» с типом – «Произвольный» (наличие такого готового реквизита несколько ускоряет открытие формы):

2.6   Желательно добавить в командную панель подменю «ПодменюОтчеты» с установленными свойствами, как на картинке ниже:

3.      В общем модуле «ВариантыОтчетовПереопределяемый»  в процедуре  «ОпределитьОбъектыСКомандамиОтчетов»  обязательно следует проверить принадлежность вашего объекта метаданных к обслуживаемому списку объектов. При необходимости - добавить:  
 
Процедура ОпределитьОбъектыСКомандамиОтчетов (Объекты) Экспорт
	…
	Объекты.Добавить(Метаданные.Справочники._ДемоМестаХранения);
	Объекты.Добавить(Метаданные.Документы._ДемоПоступлениеТоваров);
	…
КонецПроцедуры

4.      Заказать добавление команды отчетов по одному из вариантов, описанных на следующей странице


 Три возможности заказа добавления команд отчетов:


1) В модуле менеджера обслуживаемого объекта (документа или справочника, для которого требуются контекстные отчеты)
В процедуре ДобавитьКомандыОтчетов.
Например:
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов, Параметры) Экспорт
Если ПравоДоступа("Просмотр", Метаданные.Отчеты.АнализОпроса) Тогда
		Команда = КомандыОтчетов.Добавить();
		Команда.Представление      = НСтр("ru = 'Анализ опроса'");
		Команда.МножественныйВыбор = Ложь;
		Команда.ИмяПараметраФормы  = "Опрос";
		Команда.Менеджер           = "Отчет.АнализОпроса";
	КонецЕсли;
…
КонецПроцедуры

2) Команды контекстных отчетов, выводимые сразу во всех (или во многих) объектах метаданных, рекомендуется описывать в процедуре ПередДобавлениемКомандОтчетов общего модуля ВариантыОтчетовПереопределяемый. 
Например:

Процедура ПередДобавлениемКомандОтчетов(КомандыОтчетов, Параметры, СтандартнаяОбработка) Экспорт
    Если ПравоДоступа("Просмотр", Метаданные.Отчеты.МестаИспользованияСсылок) Тогда
        Команда = КомандыОтчетов.Добавить();
        Команда.Представление      = НСтр("ru = 'Места использования'");
        Команда.МножественныйВыбор = Истина;
        Команда.ИмяПараметраФормы  = "Отбор.НаборСсылок";
        Команда.КлючВарианта       = "Основной";
        Команда.Менеджер           = "Отчет.МестаИспользованияСсылок";
    КонецЕсли;
КонецПроцедуры
В типовых таким образом подключен отчет «ОтчетОДвиженияхДокумента».

3) Кроме того, команды отчетов можно задавать в самих отчетах конфигурации (и в отчетах расширений конфигурации).  Это рекомендуется в тех случаях, когда команды обслуживают сразу несколько объектов. Для этого отчет нужно включить в состав подсистемы ПодключаемыеОтчетыИОбработки и в его модуле менеджера определить процедуры ПриОпределенииНастроек и ДобавитьКомандыОтчетов. Примечание: Для команд отчетов, добавленных в процедуре ДобавитьКомандыОтчетов, подключенной указанного выше образом, заполнение параметра Менеджер не обязательно. Пример:

Процедура ПриОпределенииНастроек(Настройки) Экспорт
 Настройки.Размещение.Добавить(Метаданные.Документы.НазначениеОпросов);
 Настройки.ДобавитьКомандыОтчетов = Истина;
КонецПроцедуры

Процедура ДобавитьКомандыОтчетов(КомандыОтчетов, Параметры) Экспорт
Если ПравоДоступа("Просмотр", Метаданные.Отчеты.АнализОпроса) Тогда
		Команда = КомандыОтчетов.Добавить();
		Команда.Представление      = НСтр("ru = 'Анализ опроса'");
		Команда.МножественныйВыбор = Ложь;
		Команда.ИмяПараметраФормы  = "Опрос";
		
	КонецЕсли;
…

КонецПроцедуры

Описание параметров, задаваемых в строках таблицы «КомандыОтчетов» 


Непосредственное добавление команд вызова контекстных отчетов всегда оформляется строкой кода 
Команда = КомандыОтчетов.Добавить();

А вот что мы можем определить для этой команды далее – давайте рассмотрим подробно. Итак, возможные к использованию параметры:

Идентификатор - Строка - Идентификатор команды, который используется для идентификации команды и определения имени команды в форме. Если идентификатор не указан, то имя команды будет определено автоматически.

Для настройки внешнего вида:     
Представление - Строка   - Представление команды в форме (обязательный).
Важность  - Строка  - Краткое имя (суффикс) группы в подменю, в которой следует вывести эту команду. Допустимо использовать значения: "Важное", "Обычное" и "СмТакже".
Порядок  - Число  - Значение от 1 до 100, указывающее порядок размещения команды по отношению к другим командам. Сортировка команд осуществляется сначала по полю Порядок, затем по представлению. Значение по умолчанию: 50..
Картинка  - Картинка - Картинка команды.
СочетаниеКлавиш - СочетаниеКлавиш - Сочетание клавиш для быстрого вызова команды.

Для настройки видимости и доступности:
ТипПараметра - ОписаниеТипов - Типы объектов, для которых предназначена эта команда. Используется, когда обработка (или другой поставщик команд) подключена к нескольким объектам конфигурации, для уточнения списка объектов, к которым подключена конкретная команда.
ВидимостьВФормах    - Строка - Имена форм через запятую, в которых должна отображаться команда. Используется для уточнения состава форм, к которым подключена конкретная команда. Если параметр не указан, то команда будет отображаться во всех формах. Используется, когда состав команд отличается для различных форм.
ФункциональныеОпции - Строка - Имена функциональных опций через запятую, определяющих видимость команды.
УсловияВидимости  - Массив - Определяет видимость команды в зависимости от контекста.
                                        Для регистрации условий следует использовать процедуру
                                        ПодключаемыеКоманды.ДобавитьУсловиеВидимостиКоманды().
                                        Условия объединяются по "И".
ИзменяетВыбранныеОбъекты - Булево - Определяет доступность команды в ситуации,
                                        когда у пользователя нет прав на изменение объекта.
                                        Если Истина, то в описанной выше ситуации кнопка будет недоступна.
                                        Необязательный. Значение по умолчанию: Ложь.
     
Для настройки процесса выполнения:
МножественныйВыбор - Булево, Неопределено - Если Истина, то команда поддерживает множественный выбор. В этом случае в  параметре выполнения (первом параметре обработчика команды) будет передан массив ссылок, иначе – одна ссылка. Значение по умолчанию: Истина.
РежимЗаписи - Строка - Действия, связанные с записью объекта, которые выполняются перед обработчиком команды.
             "НеЗаписывать"          - Объект не записывается, а в параметрах обработчика вместо ссылок передается вся форма. В этом режиме рекомендуется работать напрямую с формой, которая передается в структуре 2 параметра обработчика команды.
            "ЗаписыватьТолькоНовые" - Записывать новые объекты.
            "Записывать"            - Записывать новые и модифицированные объекты.
             "Проводить"             - Проводить документы.
Перед записью и проведением у пользователя запрашивается подтверждение. Значение по умолчанию: "Записывать".
ТребуетсяРаботаСФайлами - Булево - Если Истина, то в веб-клиенте перед выполнением команды предлагается установить расширение работы с файлами. Значение по умолчанию: Ложь.
     
Настройки обработчика:
Менеджер - Строка - Полное имя отчета, как объекта метаданных, отвечающего за выполнение команды.  Пример: "Отчет._ДемоКнигаПокупок". Если ИмяФормы и Обработчик не указаны, то открывается основная форма отчета с параметрами, соответствующими контекстному режиму работы отчета (их дублирование в структуре ПараметрыФормы не требуется).
КлючВарианта - Строка - Имя варианта отчета, открываемого при выполнении команды.
ИмяПараметраФормы - Строка - Имя параметра формы, в который следует передать ссылку или массив ссылок.
ПараметрыФормы - Неопределено, Структура - Параметры формы, указанной в ИмяФормы.
ИмяФормы - Строка - Имя формы, которую требуется открыть или получить для выполнения команды. Если Обработчик не указан, то у формы вызывается метод "Открыть".
Обработчик - Строка - Описание процедуры, обрабатывающей основное действие команды.
             Формат "<ИмяОбщегоМодуля>.<ИмяПроцедуры>" используется когда процедура размещена в общем клиентском модуле.
             Формат "<ИмяПроцедуры>" используется в следующих случаях:
               - Если ИмяФормы заполнено то в модуле указанной формы ожидается клиентская процедура.
               - Если ИмяФормы не заполнено то в модуле менеджера этого объекта ожидается серверная процедура.

Во всех случаях формат самой процедуры такой: 
Процедура   <ИмяПроцедуры>(<ИмяПараметраКоманды>, ПараметрыВыполнения)   Экспорт
    // Код   обработчика команды.
КонецПроцедуры

При этом 2й параметр обработчика команды ПараметрыВыполнения имеет тип "Структура" со следующими полями: 
● ОписаниеКоманды - Структура - Описание команды (ключи соответствуют колонкам этой таблицы). 
● Идентификатор - Строка - Идентификатор команды. 
● Представление - Строка - Представление команды в форме. 
● ДополнительныеПараметры - Неопределено, ФиксированнаяСтруктура - Дополнительные параметры команды. 
● Форма - УправляемаяФорма - Форма, из которой вызвана команда. 
● ЭтоФормаОбъекта - Булево - Истина, если команда вызвана из формы объекта. 
● Источник - ТаблицаФормы, ДанныеФормыСтруктура - Объект или список формы с полем "Ссылка".

ДополнительныеПараметры - Структура - Параметры обработчика, указанного в Обработчик.



 
Методика подключения  в конфигурации нового варианта отчета с использованием дополнительных реквизитов и свойств
 
 
1) Если отчета ранее вообще не было - добавьте его согласно методики "подключения нового отчета конфигурации к подсистеме "Варианты отчетов";
2) Реализуйте в конфигураторе хоть как-то похожий на нужный вариант отчета и обеспечьте его доступность в пользовательском режиме;
3) Измените вариант в пользовательском режиме с задействованием дополнительных реквизитов или свойств, протестируйте его работоспособность
4) В окне "Изменить вариант", посредством меню "Все действия / Сохранить настройки" сбросьте вариант в файл;
5) В конфигураторе откройте настройки своего исходного варианта и загрузите поверх них настройки из файла, сохраните изменения в конфигурации.
 
 
Методика разработки команд назначаемых отчетов


1) Если отчета ранее вообще не было - добавьте его согласно методики "подключения нового отчета конфигурации к подсистеме "Варианты отчетов";
2) Создайте новую команду отчета
● тип параметра команды – включить ссылки на нужные объекты вызова (для кого - отчет);
● режим использования параметра и группа - на Ваш выбор (чаще всего относят к группе команд "См. также")

3) В модуле команд снимите комментарий с предложенного конструктором кода, в структуре "ПараметрыФормы"  предустановите значения для параметров "СформироватьПриОткрытии" и "КлючВарианта" (последний должен получить имя желаемого варианта отчета);
4) Для ситуации простого отбора - задействуйте элемент параметров формы  "Отбор". Его надо заполнять структурой отбора;
5) Для ситуации сложного отбора или настройки - задействуйте элемент параметров формы "ФиксированныеНастройки".
 
 
Альтернативная методика перевода команды назначаемого отчета на программный вызов 
1. Если команды назначаемого отчета ранее вообще не было – реализуйте и отладьте ее согласно «Методики разработки функционала команды назначаемого отчета» (например, имя у нее будет «НашаКоманда»).
2. Перенесите процедуры из модуля команды контекстного вызова отчета в свой клиентский общий модуль (например, с именем НашОбщКлМодуль) и обработайте ее:
•	Переименуйте перенесенную процедуру «ОбработкаКоманды» (в, например, ОбработкаКоманды_НашаКоманда) 
•	Добавьте к заголовку процедуры слово «Экспорт».
•	В последней команде «ОткрытьФорму» - оставьте заполненными только первые два параметра, остальные удалите
Пример того, что должно получиться:
&НаКлиенте
Процедура ОбработкаКоманды_ОтчетВедомость(ПараметрКоманды, ПараметрыВыполненияКоманды)   Экспорт
	//Вставить содержимое обработчика.
	ПараметрыФормы = Новый Структура("Отбор,СформироватьПриОткрытии,КлючВарианта",
	Новый Структура("Склад",ПараметрКоманды),
	Истина,
	"Ведомость");
	ОткрытьФорму("Отчет.Ведомость.Форма", ПараметрыФормы);
КонецПроцедуры
Если данная процедура должна вызывать некие серверные функции – перенесите их в серверный общий модуль с флажком «Вызов сервера» в свойствах.
3) Если объект и его формы ранее не готовили к работе с назначаемыми отчетами – реализуйте для него «Методику подготовки объекта для работы с назначаемыми отчетами». 
4) Закажите добавление команды отчетов по одному из вариантов, описанных на странице «Три возможности заказа добавления команд отчетов» с заполнением параметров согласно странице «Описание параметров, задаваемых в строках таблицы «КомандыОтчетов». При этом параметру «Обработчик» надо присвоить имя процедуры из п.2 (например, ОбработкаКоманды_НашаКоманда);  

От себя рекомендую использование 3-его, как наиболее универсального варианта:
4.1 Включить наш отчет в состав подсистемы ПодключаемыеОтчетыИОбработки
4.2 В модуле менеджера отчета определить процедуру ПриОпределенииНастроек по образцу:
Процедура ПриОпределенииНастроек(Настройки) Экспорт
	
	//взведение флага
	Настройки.ДобавитьКомандыОтчетов = Истина;
	//указание объектов размещения
	Настройки.Размещение.Добавить(Метаданные.Документы._ДемоРеализацияТоваров);
	Настройки.Размещение.Добавить(Метаданные.Справочники._ДемоМестаХранения);
	
КонецПроцедуры



4.3 В модуле менеджера отчета создать процедуру ДобавитьКомандыОтчетов по образцу:
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов, Параметры) Экспорт
	Команда = КомандыОтчетов.Добавить();
	Команда.Представление = НСтр("ru = 'Отчет ведомость");
	Команда.КлючВарианта  = "Ведомость";
	Команда.Обработчик = "НашОбщКлМодуль.ОбработкаКоманды_НашаКоманда ";
	
КонецПроцедуры




5) В пользовательском режиме запустите обработку «Обновление вспомогательных данных» со всеми флажками разделов «БазоваяФункциональность» и «ВариантыОтчетов».
6) После тестирования функциональности программно реализуемой команды удалите структурную команду из коллекции команд объекта.
 
