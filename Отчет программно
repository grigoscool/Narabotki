 -- в колонке значения ресурса через запятую
ВычислитьВыражениеСГруппировкойМассив("НомерСборочногоЛиста", "НомерСборочногоЛиста")


--- Для Контекстного отчета
-- ВАРИАНТ 1
1. Добавить команду в отчет в дереве объектов
2. В модуле команды код по открытию формы с отбором  

-- ВАРИАНТ 2
1. Расширить состав типов в определяемом типе "ОбъектСДополнительнымиКомандами"
2. В формах справочника "Характеристики .." прописать код подсистемы. Найти примеры можно в формах объектов, описанных в п.1.
см. на "Подключаемый_ВыполнитьНазначаемуюКоманду", "ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНа­Сервере"

3. Дальше в модуль отчета вставляем код ниже.

Функция СведенияОВнешнейОбработке() Экспорт
    
    ПараметрыРегистрации = ДополнительныеОтчетыИОбработки.СведенияОВнешнейОбработке("2.2.2.1");
    ПараметрыРегистрации.Вид = ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиОтчет();
    ПараметрыРегистрации.Версия = "1.0.0.1";
    ПараметрыРегистрации.Назначение.Добавить("Справочник.ХарактеристикиНоменклатуры");    
    
    Команда = ПараметрыРегистрации.Команды.Добавить();
    Команда.Представление = НСтр("ru = 'Мой новый отчет'");
    Команда.Идентификатор = "МойНовыйОтчет";
    Команда.Использование = ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыОткрытиеФормы() ;
    Команда.ПоказыватьОповещение = Ложь;
    Возврат ПараметрыРегистрации; 
    
КонецФункции

4. Что бы получить ссылку, которая передается, как параметр в форме отчета должен быть параметр "ОбъектыНазначения" тип "Произвольный".

#Область ПрограммныйИнтерфейс

// Настройки общей формы отчета подсистемы "Варианты отчетов".
//
// Параметры:
//   Форма - ФормаКлиентскогоПриложения, Неопределено - Форма отчета или форма настроек отчета.
//       Неопределено когда вызов без контекста.
//   КлючВарианта - Строка, Неопределено - Имя предопределенного
//       или уникальный идентификатор пользовательского варианта отчета.
//       Неопределено когда вызов без контекста.
//   Настройки - Структура - Настройки общей формы отчета (для изменения).
//       См. возвращаемое значение ОтчетыКлиентСервер.ПолучитьНастройкиОтчетаПоУмолчанию().
//
Процедура ОпределитьНастройкиФормы(Форма, КлючВарианта, Настройки) Экспорт

	Настройки.ФормироватьСразу = Истина;
	Настройки.События.ПриСозданииНаСервере = Истина;

КонецПроцедуры

// Вызывается в обработчике одноименного события формы отчета после выполнения кода формы.
// См. также ФормаКлиентскогоПриложения.ПриСозданииНаСервере в синтакс-помощнике.
//
// Параметры:
//   Форма - ФормаКлиентскогоПриложения - Форма отчета.
//   Отказ - Булево - Передается из параметров обработчика "как есть".
//   СтандартнаяОбработка - Булево - Передается из параметров обработчика "как есть".
//
Процедура ПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка) Экспорт
	
	ОбъектыНазначения = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Форма.Параметры, "ОбъектыНазначения");
	Если ОбъектыНазначения <> Неопределено Тогда
		Форма.ФормаПараметры.Отбор.Вставить("Ссылка", ОбъектыНазначения);
	КонецЕсли;
	
КонецПроцедуры


 --- Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)  
	
	СтандартнаяОбработка = Ложь;
	 
	 //Получаем схему из макета
	СхемаКомпоновкиДанных = ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных");

	//Из схемы возьмем настройки по умолчанию
	Настройки = КомпоновщикНастроек.ПолучитьНастройки();
  // устанавливаем параметры программно
	ПараметрДата = Настройки.ПараметрыДанных.Элементы.Найти("Дата");
	Если НЕ ПараметрДата = Неопределено Тогда
	     Дата = ПараметрДата.Значение.Дата;
	КонецЕсли;
	
	ПараметрДанных = Настройки.ПараметрыДанных.Элементы.Найти("ДатаБПЛДоИзм"); 
	ВидЦеныБПЛ = Настройки.ПараметрыДанных.Элементы.Найти("ВидЦеныБПЛ").Значение;
	ДатаБПЛДоИзм = ПолучитьДатуДействияВидовЦен(ВидЦеныБПЛ,Дата); 
	Если НЕ Типзнч(ДатаБПЛДоИзм) = Тип("Неопределено") Тогда
	     ДатаБПЛДоИзм  = ДатаБПЛДоИзм - 1; 
	 Иначе 
		 ДатаБПЛДоИзм = Дата;
	КонецЕсли;

	ПараметрДанных.Значение = ДатаБПЛДоИзм;
	ПараметрДанных.Использование = Истина;
	
	ПараметрДанных = Настройки.ПараметрыДанных.Элементы.Найти("ДатаКПЛДоИзм"); 
	ВидЦеныКПЛ = Настройки.ПараметрыДанных.Элементы.Найти("ВидЦеныКПЛ").Значение;
	ДатаКПЛДоИзм = ПолучитьДатуДействияВидовЦен(ВидЦеныКПЛ,Дата);   
	Если НЕ Типзнч(ДатаКПЛДоИзм) = Тип("Неопределено") Тогда
	     ДатаКПЛДоИзм  = ДатаКПЛДоИзм - 1;
	 Иначе
		 ДатаКПЛДоИзм = Дата;
	КонецЕсли;

	ПараметрДанных.Значение = ДатаКПЛДоИзм;        
	ПараметрДанных.Использование = Истина;
	
	//Помещаем в переменную данные о расшифровке данных
	ДанныеРасшифровки = Новый ДанныеРасшифровкиКомпоновкиДанных;

	//Формируем макет, с помощью компоновщика макета
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;

	//Передаем в макет компоновки схему, настройки и данные расшифровки
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, Настройки, ДанныеРасшифровки);

	//Выполним компоновку с помощью процессора компоновки
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки, , ДанныеРасшифровки);

	//Выводим результат в табличный документ
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ДокументРезультат);

	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
	
КонецПроцедуры
